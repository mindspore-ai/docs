资源利用
--------

资源利用包括CPU利用率和内存使用情况分析。

.. figure:: ./images/resource_visibility.png
   :alt: resource_visibility.png

*图：资源利用总览*

上图展示了资源利用总览页面，包括CPU利用率分析与内存使用情况分析。通过点击右上角的\ ``查看详情``\ 按钮可以查看详细信息。

CPU利用率分析
~~~~~~~~~~~~~

CPU利用率分析，主要起到辅助性能调试的作用。根据Queue
size确定了性能瓶颈后，可以根据CPU利用率辅助对性能进行调试（用户利用率过低，增加线程数；系统利用率过大，减小线程数）。
CPU利用率包含整机CPU利用率、进程CPU利用率、Data pipeline操作CPU利用率。

.. figure:: ./images/device_cpu_utilization.png
   :alt: device_cpu_utilization.png

*图：整机CPU利用率*

整机CPU利用率：展示设备在训练过程中整体的CPU使用情况，包含用户利用率、系统利用率、空闲利用率、IO利用率、当前活跃进程数、上下文切换次数。如果用户利用率较低，可以尝试增大操作线程数，增加CPU使用情况；如果系统利用率较大，同时上下文切换次数、CPU等待处理的进程较大，说明需要相应减少线程个数。

.. figure:: ./images/process_cpu_utilizaton.png
   :alt: process_cpu_utilization.png

*图：进程利用率*

进程利用率：展示单个进程的CPU占用情况。整机利用率和进程利用率结合，可以确定训练过程中是否有其他进程影响训练。

.. figure:: ./images/data_op_utilization.png
   :alt: data_op_cpu_utilization.png

*图：算子利用率*

算子利用率：展示Data
pipeline单个操作占用的CPU利用率。可以根据实际情况，调整对应操作的线程数。如果线程数不大，占用CPU较多，可以考虑优化代码。

CPU利用率常用场景:

- 网络调试人员根据Queue
  size判断是Data性能有瓶颈，可以结合整机利用率和算子利用率作为辅助尝试调整线程数。
- 开发人员可以查看算子利用率，如果某一个操作比较耗CPU利用率，可以考虑优化该操作。

.. note::
   默认采样间隔为1000ms，用户可以通过\ ``mindspore.dataset.config.get_monitor_sampling_interval()``\ 来改变采样间隔。详情参考：
   `dataset API sampling interval <https://mindspore.cn/docs/zh-CN/master/api_python/dataset/mindspore.dataset.config.set_monitor_sampling_interval.html#mindspore.dataset.config.set_monitor_sampling_interval>`_ 。

内存使用情况分析
~~~~~~~~~~~~~~~~

该页面用于展示模型在\ **Device侧**\ 的内存使用情况，是\ **基于理论值的理想预估**\ 。页面内容包括：

- 模型的内存分配概览，包括总可用内存、峰值内存等信息。
- 模型运行过程中，占用内存大小随执行顺序的变化。
- 模型运行过程中，每个执行算子的内存使用分解情况。

.. note::
   内存使用情况分析暂不支持异构训练场景。

.. figure:: ./images/memory.png
   :alt: memory.png

*图：内存使用情况页面*

用户可以结合\ ``内存分配概览``\ 提供的信息以及折线图的变化趋势来了解内存使用的大致情况，除此之外，从折线图里还可以获得更多细节信息，包括：

- 局部缩放：折线图下方有缩放滚动条，用户可以通过调节其大小对折线图进行放大或缩小，以便观察细节。
- 前向开始和反向结束位置：通常情况下，用户可以在折线图上观察到模型的前向开始和反向结束的执行位置。
- 执行算子信息：鼠标悬浮在折线图上的某处，可以看到对应位置的执行算子信息，包括算子执行顺序编号、算子名称、算子占用内存、模型在当前位置占用的总内存，以及与前一执行位置的相对内存变化。
- 算子内存分配情况：鼠标点击折线图上的某一位置，位于折线图下方的\ ``算子内存分配``\ 模块会将该执行位置的内存使用分解情况展示出来。\ ``算子内存分配``\ 模块展示了对应执行位置的内存分解情况，也即，当前执行位置的已占用内存分配给了哪些算子的输出张量。该模块给用户提供了更丰富的信息，包括张量名称、张量大小、张量类型、数据类型、形状、格式，以及张量内存活跃的生命周期。

.. figure:: ./images/memory_graphics.png
   :alt: memory_graphics.png

*图：内存使用折线图*

Host侧内存使用情况
~~~~~~~~~~~~~~~~~~

如果开启了Host侧内存收集功能，在训练结束后可以在指定目录下查看内存使用情况。例如，Profiler实例化时，指定output_path="/XXX/profiler_output"，Host侧内存数据会保存在"/XXX/profiler_output/profiler/host_info"目录下，文件格式为csv，前缀为host_memory\_，后缀为rank_id。表头的含义如下：

- tid：收集Host侧内存时当前线程的线程号。
- pid：收集Host侧内存时当前进程的进程号。
- parent_pid：收集Host侧内存时当前进程的父进程的进程号。
- module_name：收集Host侧内存的组件名，一个组件包含一个或多个event。
- event：收集Host侧内存的事件名，一个event包含一个或多个stage。
- stage：收集Host侧内存的阶段名。
- level：信息级别，0表示细粒度的信息，通常是高级开发者用于定位问题，1表示粗粒度的信息，用于普通开发者。
- start_end：stage开始或结束的标记，0表示开始标记，1表示结束标记，2表示不区分开始或结束。
- custom_info：组件自定义信息，可能为空。
- memory_usage：Host侧内存占用，单位为kB，0表示当前阶段没有收集内存数据。
- time_stamp：时间戳，单位为us。

