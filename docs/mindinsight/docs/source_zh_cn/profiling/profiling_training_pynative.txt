准备训练脚本
------------

为了收集神经网络的性能数据，需要在训练脚本中添加MindSpore
Profiler相关接口。

- 在训练开始前，需要初始化MindSpore ``Profiler``\ 对象。

  .. note::
     Profiler支持的参数可以参考：
     https://www.mindspore.cn/docs/zh-CN/master/api_python/mindspore.profiler.html

- 在训练结束后，调用\ ``Profiler.analyse()``\ 停止性能数据收集并生成性能分析结果。

正常场景样例代码如下：

.. code:: python

   import numpy as np
   from mindspore import nn, context
   from mindspore import Model
   import mindspore.dataset as ds
   from mindspore.profiler import Profiler


   class Net(nn.Cell):
       def __init__(self):
           super(Net, self).__init__()
           self.fc = nn.Dense(2, 2)

       def construct(self, x):
           return self.fc(x)


   def generator():
       for i in range(2):
           yield (np.ones([2, 2]).astype(np.float32), np.ones([2]).astype(np.int32))


   def train(net):
       optimizer = nn.Momentum(net.trainable_params(), 1, 0.9)
       loss = nn.SoftmaxCrossEntropyWithLogits(sparse=True)
       data = ds.GeneratorDataset(generator, ["data", "label"])
       model = Model(net, loss, optimizer)
       model.train(1, data)


   if __name__ == '__main__':
       context.set_context(mode=context.PYNATIVE_MODE, device_target="Ascend")
       # Init Profiler
       # Note that the Profiler should be initialized before model.train
       profiler = Profiler(output_path = './profiler_data')
       # Train Model
       net = Net()
       train(net)
       # Profiler end
       profiler.analyse()
