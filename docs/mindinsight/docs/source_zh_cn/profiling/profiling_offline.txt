离线解析
--------

当Profiler采集性能数据较大时，若在训练过程中直接使用Profiler.analyse()进行在线解析，则可能导致对系统资源占用过大，从而影响训练效率。Profiler提供了离线解析功能，支持采集完成性能数据后，使用Profiler.offline_analyse对采集数据进行离线解析。

训练脚本采集性能数据且不在线解析的部分代码示例如下：

.. code:: python

   class Net(nn.Cell):
       ...


   def train(net):
       ...


   if __name__ == '__main__':
       ms.set_context(mode=ms.GRAPH_MODE, device_target="Ascend")

       # Init Profiler
       # Note that the Profiler should be initialized before model.train
       profiler = ms.Profiler(output_path='/path/to/profiler_data')

       # Train Model
       net = Net()
       train(net)  # Error occur.

       # Collection end
       profiler.stop()


在上述代码采集性能数据后，可以用离线接口来解析数据，示例代码如下：

.. code:: python

   from mindspore import Profiler

   Profiler.offline_analyse(path='/path/to/profiler_data', pretty=False, step_list=None, data_simplification=True)


离线解析接口参数描述如下：

- path (str) - 需要进行离线分析的profiling数据路径，指定到profiler上层目录。支持传入单卡和多卡数据路径。
- pretty (bool, 可选) - 对json文件进行格式化处理。此参数默认值为 False，即不进行格式化。
- step_list (list, 可选) - 只分析指定step的性能数据。此参数默认值为 None，即进行全解析。
- data_simplification (bool, 可选) - 数据精简开关功能。默认值为 True，即开启数据精简。

参数注意事项：

- step_list参数只在解析graph模式的采集数据时生效，且指定的step必须连续。
- data_simplification参数默认开启，若连续两次离线解析均打开该开关，第一次数据精简会将框架侧采集数据删除，进而导致第二次离线解析框架侧解析结果缺失。

离线解析传入的path路径支持单卡和多卡数据路径，不同场景描述如下。

单卡场景
~~~~~~~~~~~~

采用离线解析解析单卡数据时，传入的profiling数据路径/path/to/profiler_data的目录结构如下：

.. code::

    └──── profiler_data
        └────profiler

解析的性能数据在/path/to/profiler_data/profiler目录下生成。

多卡场景
~~~~~~~~~~~~

采用离线解析解析多卡数据时，传入的profiling数据路径/path/to/profiler_data的目录结构如下：

.. code::

    └──── profiler_data
        ├────rank_0
        │   └────profiler
        ├────rank_1
        │   └────profiler
        ├────rank_2
        │   └────profiler
        └────rank_3
            └────profiler

解析的性能数据在每张卡数据路径的profiler目录下生成。下面展示了解析生成性能数据的目录结构。

目录结构
~~~~~~~~~~~~

性能数据目录结构示例如下：

.. code::

    └──── profiler 
        ├──── container      
        ├──── FRAMEWORK      // 框架侧采集的原始数据
        │   └──── op_range_*
        ├──── PROF_{数字}_{时间戳}_{字符串}       // msprof性能数据
        │   ├──── analyse
        │   ├──── device_*
        │   ├──── host
        │   ├──── mindstudio_profiler_log
        │   └──── mindstudio_profiler_output
        ├──── rank_* // 内存相关的原始数据
        │   ├──── memory_block.csv
        │   └──── task.csv
        ├──── rank-*_{时间戳}_ascend_ms      // MindStudio Insight可视化交付件
        │   ├──── ASCEND_PROFILER_OUTPUT      // MindSpore Profiler接口采集的性能数据
        │   ├──── profiler_info_*.json
        │   └──── profiler_metadata.json      // 记录用户自定义的meta数据，调用add_metadata或add_metadata_json接口生成该文件
        ├──── aicore_intermediate_*_detail.csv
        ├──── aicore_intermediate_*_type.csv
        ├──── aicpu_intermediate_*.csv
        ├──── ascend_cluster_analyse_model-{mode}_{stage_num}_{rank_size}_*.csv
        ├──── ascend_timeline_display_*.json
        ├──── ascend_timeline_summary_*.json
        ├──── cpu_framework_*.txt      // 异构场景生成
        ├──── cpu_ms_memory_record_*.txt
        ├──── cpu_op_detail_info_*.csv      // 异构场景生成
        ├──── cpu_op_execute_timestamp_*.txt      // 异构场景生成
        ├──── cpu_op_type_info_*.csv      // 异构场景生成
        ├──── dataset_iterator_profiling_*.txt      // 数据非下沉场景生成
        ├──── device_queue_profiling_*.txt      // 数据下沉场景生成
        ├──── dynamic_shape_info_*.json
        ├──── flops_*.txt
        ├──── flops_summary_*.json
        ├──── framework_raw_*.csv
        ├──── hccl_raw_*.csv      // 配置profiler(profiler_communication=True)生成
        ├──── minddata_aicpu_*.json      // 数据下沉场景生成
        ├──── minddata_cpu_utilization_*.json
        ├──── minddata_pipeline_raw_*.csv
        ├──── minddata_pipeline_summary_*.csv
        ├──── minddata_pipeline_summary_*.json
        ├──── operator_memory_*.csv
        ├──── output_timeline_data_*.txt
        ├──── parallel_strategy_*.json
        ├──── pipeline_profiling_*.json
        ├──── profiler_info_*.json
        ├──── step_trace_point_info_*.json
        └──── step_trace_raw_*_detail_time.csv
        └──── dataset_*.csv

- \* 代表rank id

性能数据文件描述
~~~~~~~~~~~~~~~~~~

PROF_{数字}_{时间戳}_{字符串}目录下为CANN Profiling采集的性能数据，主要保存在mindstudio_profiler_output中，数据介绍在 `昇腾社区官网 <https://www.hiascend.com/zh>`_ 搜索“性能数据文件参考”查看。

profiler目录下包含csv、json、txt三类文件，覆盖了算子执行时间、内存占用、通信等方面的性能数据，文件说明见下表。部分文件的详细说明参考 `性能数据 <https://www.mindspore.cn/mindinsight/docs/zh-CN/master/profiler_files_description.html>`_。

==============================================  ==============================================================================
文件名                                           说明
==============================================  ==============================================================================
step_trace_point_info_*.json                    step节点对应的算子信息（仅mode=GRAPH,export GRAPH_OP_RUM=0）
step_trace_raw_*_detail_time.csv                每个step的节点的时间信息（仅mode=GRAPH,export GRAPH_OP_RUM=0）

dynamic_shape_info_*.json                       动态shape下算子信息

pipeline_profiling_*.json                       MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化
minddata_pipeline_raw_*.csv                     MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化
minddata_pipeline_summary_*.csv                 MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化
minddata_pipeline_summary_*.json                MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化
framework_raw_*.csv                             MindSpore数据处理中AI Core算子的信息
device_queue_profiling_*.txt                    MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化（仅数据下沉场景）
minddata_aicpu_*.txt                            MindSpore数据处理中AI CPU算子的性能数据（仅数据下沉场景）
dataset_iterator_profiling_*.txt                MindSpore数据处理，采集落盘的中间文件，用于MindInsight可视化（仅数据非下沉场景）

aicore_intermediate_*_detail.csv                AI Core算子数据
aicore_intermediate_*_type.csv                  AI Core算子调用次数和耗时统计
aicpu_intermediate_*.csv                        AI CPU算子信息解析后耗时数据
flops_*.txt                                     记录AI Core算子的浮点计算次数（FLOPs）、每秒的浮点计算次数（FLOPS）
flops_summary_*.json                            记录所有算子的总的FLOPs、所有算子的平均FLOPs、平均的FLOPS_Utilization

ascend_timeline_display_*.json                  timeline可视化文件，用于MindStudio Insight可视化
ascend_timeline_summary_*.json                  timeline统计数据
output_timeline_data_*.txt                      算子timeline数据，只有AI Core算子数据存在时才有

cpu_ms_memory_record_*.txt                      内存profiling的原始文件
operator_memory_*.csv                           算子级内存信息

minddata_cpu_utilization_*.json                 CPU利用率

cpu_op_detail_info_*.csv                        CPU算子耗时数据（仅mode=GRAPH）
cpu_op_type_info_*.csv                          具体类别CPU算子耗时统计（仅mode=GRAPH）
cpu_op_execute_timestamp_*.txt                  CPU算子执行起始时间与耗时（仅mode=GRAPH）
cpu_framework_*.txt                             异构场景下CPU算子耗时（仅mode=GRAPH）

ascend_cluster_analyse_model-xxx.csv            在模型并行或pipeline并行模式下，计算和通信等相关数据（仅mode=GRAPH）      

hccl_raw_*.csv                                  基于卡的通信时间和通信等待时间（仅mode=GRAPH）

parallel_strategy_*.json                        算子并行策略，采集落盘中间文件，用于MindInsight可视化

profiler_info_*.json                            Profiler配置等info信息

dataset_*.csv                                   数据处理模块各阶段执行耗时（要收集这部分数据，需要从最开始就开启profiler，至少是第一个step前）
==============================================  ==============================================================================

- \* 表示rank id
- ascend_cluster_analyse_model-xxx_*.csv完整的文件名应该是ascend_cluster_analyse_model-{mode}_{stage_num}_{rank_size}_{rank_id}.csv，比如ascend_cluster_analyse_model-parallel_1_8_0.csv