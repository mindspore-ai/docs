Offline Analyse
--------------------

When an error occurs during the training process leading to an abnormal exit, the performance file cannot be fully saved, and the Profiler provides offline parsing functionality.

For example, the partial code of the training script is as follows:

.. code:: python

   class Net(nn.Cell):
       ...


   def train(net):
       ...


   if __name__ == '__main__':
       ms.set_context(mode=ms.GRAPH_MODE, device_target="Ascend")

       # Init Profiler
       # Note that the Profiler should be initialized before model.train
       profiler = ms.Profiler(output_path='/path/to/profiler_data')

       # Train Model
       net = Net()
       train(net)  # Error occur.

       # Profiler end
       profiler.analyse()


If an exception occurs in above code during the training process, resulting in the `profiler.analyse()` at the last line not being executed, the performance data will not be completely parsed. At this point, the offline interface can be used to parse data, and the example code is as follows:

.. code:: python

   from mindspore import Profiler

   Profiler.offline_analyse(path='/path/to/profiler_data')


After offline parsing, you can view the profiling data in the directory `/path/to/profiler_data/profile` .

Directory Structure
~~~~~~~~~~~~~~~~~~~~

An example of the performance data catalog structure is shown below:

.. code::

    └──── profiler 
        ├──── container      
        ├──── FRAMEWORK      // Raw data collected on the frame side
        │   └──── op_range_*
        ├──── PROF_{number}_{timestamp}_{string}       // msprof performance data
        │   ├──── analyse
        │   ├──── device_*
        │   ├──── host
        │   ├──── mindstudio_profiler_log
        │   └──── mindstudio_profiler_output
        ├──── rank_* // Memory-related raw data
        │   ├──── memory_block.csv
        │   └──── task.csv
        ├──── rank-*_{timestamp}_ascend_ms      // MindStudio Insight Visualization Deliverables
        │   ├──── ASCEND_PROFILER_OUTPUT      // Performance data collected by the MindSpore Profiler interface
        │   ├──── profiler_info_*.json
        │   └──── profiler_metadata.json      // To record user-defined meta data, call the add_metadata or add_metadata_json interface to generate the file
        ├──── aicore_intermediate_*_detail.csv
        ├──── aicore_intermediate_*_type.csv
        ├──── aicpu_intermediate_*.csv
        ├──── ascend_cluster_analyse_model-{mode}_{stage_num}_{rank_size}_*.csv
        ├──── ascend_timeline_display_*.json
        ├──── ascend_timeline_summary_*.json
        ├──── cpu_framework_*.txt      // Heterogeneous scenario generation
        ├──── cpu_ms_memory_record_*.txt
        ├──── cpu_op_detail_info_*.csv      // Heterogeneous scenario generation
        ├──── cpu_op_execute_timestamp_*.txt      // Heterogeneous scenario generation
        ├──── cpu_op_type_info_*.csv      // Heterogeneous scenario generation
        ├──── dataset_iterator_profiling_*.txt      // Data non-sinking scenario generation
        ├──── device_queue_profiling_*.txt      // Data sinking scenario generation
        ├──── dynamic_shape_info_*.json
        ├──── flops_*.txt
        ├──── flops_summary_*.json
        ├──── framework_raw_*.csv
        ├──── hccl_raw_*.csv      // Configure the profiler (profiler_communication=True) to generate
        ├──── minddata_aicpu_*.json      // Data sinking scenario generation
        ├──── minddata_cpu_utilization_*.json
        ├──── minddata_pipeline_raw_*.csv
        ├──── minddata_pipeline_summary_*.csv
        ├──── minddata_pipeline_summary_*.json
        ├──── operator_memory_*.csv
        ├──── output_timeline_data_*.txt
        ├──── parallel_strategy_*.json
        ├──── pipeline_profiling_*.json
        ├──── profiler_info_*.json
        ├──── step_trace_point_info_*.json
        └──── step_trace_raw_*_detail_time.csv
        └──── dataset_*.csv
    
- \* represents rank id

Performance Data File Description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PROF_{number}_{timestamp}_{string} directory is the performance data collected by CANN Profiling, which is mainly stored in mindstudio_profiler_output. The data introduction can be referred to `Performance data file description <https://www.hiascend.com/document/detail/en/mindstudio/70RC2/mscommandtoolug/mscommandug/atlasprofiling_16_0062.html>`_.

The profiler directory contains three types of files, csv, json, and txt, which cover performance data in terms of operator execution time, memory usage, communication, etc. The file descriptions are shown in the following table. For detailed descriptions of some files, refer to `Performance data <https://www.mindspore.cn/mindinsight/docs/en/master/profiler_files_description.html>`_.

==============================================  ==============================================================================
File Names                                           Descriptions
==============================================  ==============================================================================
step_trace_point_info_*.json                    Information about the operator corresponding to the step node (only mode=GRAPH,export GRAPH_OP_RUM=0)
step_trace_raw_*_detail_time.csv                Time information for the nodes of each STEP (only mode=GRAPH,export GRAPH_OP_RUM=0)

dynamic_shape_info_*.json                       Operator information under dynamic shape

pipeline_profiling_*.json                       MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization
minddata_pipeline_raw_*.csv                     MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization
minddata_pipeline_summary_*.csv                 MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization
minddata_pipeline_summary_*.json                MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization
framework_raw_*.csv                             Information about AI Core operators in MindSpore data processing
device_queue_profiling_*.txt                    MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization (data sinking scenarios only)
minddata_aicpu_*.txt                            Performance data for AI CPU operators in MindSpore data processing (data sinking scenarios only)
dataset_iterator_profiling_*.txt                MindSpore data processing to capture intermediate files of falling disks for MindInsight visualization (data non-sinking scenarios only)

aicore_intermediate_*_detail.csv                AI Core operator data
aicore_intermediate_*_type.csv                  AI Core operator calling counts and time taken statistics
aicpu_intermediate_*.csv                        Time taken data after AI CPU operator information parsing
flops_*.txt                                     Record the number of floating-point calculations (FLOPs), floating-point calculations per second (FLOPS) for AI Core operators
flops_summary_*.json                            Record total FLOPs for all operators, average FLOPs for all operators, average FLOPS_Utilization

ascend_timeline_display_*.json                  timeline visualization file for MindStudio Insight visualization
ascend_timeline_summary_*.json                  timeline statistics
output_timeline_data_*.txt                      Operator timeline data, only if AI Core operator data exists

cpu_ms_memory_record_*.txt                      Raw files for memory profiling
operator_memory_*.csv                           Operator-level memory information

minddata_cpu_utilization_*.json                 CPU utilization rate

cpu_op_detail_info_*.csv                        CPU operator time taken data (mode=GRAPH only)
cpu_op_type_info_*.csv                          Class-specific CPU operator time taken statistics (mode=GRAPH only)
cpu_op_execute_timestamp_*.txt                  CPU operator execution start time and time taken (mode=GRAPH only)
cpu_framework_*.txt                             CPU operator time taken in heterogeneous scenarios (mode=GRAPH only)

ascend_cluster_analyse_model-xxx.csv            Data related to computation and communication, etc. in model-parallel or pipeline-parallel modes (mode=GRAPH only)  

hccl_raw_*.csv                                  Card-based communication time and communication wait time (mode=GRAPH only)

parallel_strategy_*.json                        Operator parallel strategy to capture falling disk intermediate files for MindInsight visualization

profiler_info_*.json                            Profiler Configuration and other info

dataset_*.csv                                   The time consuming of various stages of data processing module
==============================================  ==============================================================================

- \* represents rank id
- The complete name of ascend_cluster_analyse_model-xxx_*.csv should be ascend_cluster_analyse_model-{mode}_{stage_num}_{rank_size}_{rank_id}.csv, such as ascend_cluster_analyse_model-parallel_1_8_0.csv
